name: Android Release

on:
  push:
    branches:
      - main
    paths:
      - app.json

jobs:
  release:
    if: github.event.head_commit.message != '' && contains(github.event.head_commit.message, 'version')
    runs-on: ubuntu-latest

    env:
      EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
      EAS_ACCESS_TOKEN: ${{ secrets.EXPO_TOKEN }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Extract version from app.json
        id: extract_version
        run: |
          VERSION=$(jq -r '.expo.version' app.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Install eas-cli
        run: npm install -g eas-cli

      - name: Fetch latest AAB build from 'production'
        id: get_aab
        run: |
          echo "Fetching latest AAB build..."
          BUILD=$(eas build:list --platform android --profile production --limit 1 --json || echo "[]")
          echo "AAB build list: $BUILD"
          echo "$BUILD" > build-aab.json
          AAB_URL=$(echo "$BUILD" | jq -r '.[0].artifacts.buildUrl')
          echo "aab_url=$AAB_URL"
          echo "aab_url=$AAB_URL" >> "$GITHUB_OUTPUT"
        env:
          EAS_ACCESS_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Fetch latest APK build from 'production-apk'
        id: get_apk
        run: |
          echo "Fetching latest APK build..."
          BUILD=$(eas build:list --platform android --profile production-apk --limit 1 --json || echo "[]")
          echo "APK build list: $BUILD"
          echo "$BUILD" > build-apk.json
          APK_URL=$(echo "$BUILD" | jq -r '.[0].artifacts.applicationArchiveUrl')
          echo "apk_url=$APK_URL"
          echo "apk_url=$APK_URL" >> "$GITHUB_OUTPUT"
        env:
          EAS_ACCESS_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Download AAB & APK
        run: |
          mkdir -p dist
          curl -L "${{ steps.get_aab.outputs.aab_url }}" -o dist/app-release.aab
          curl -L "${{ steps.get_apk.outputs.apk_url }}" -o dist/app-release.apk

      - name: Generate release.json
        run: |
          echo '{ "version": "'"$VERSION"'", "aab_url": "https://github.com/${{ github.repository }}/releases/download/v'"$VERSION"'/app-release.aab", "apk_url": "https://github.com/${{ github.repository }}/releases/download/v'"$VERSION"'/app-release.apk" }' > dist/release.json

      - name: Generate CHANGELOG.md
        run: |
          echo "## Changelog for v$VERSION" > dist/CHANGELOG.md
          echo "" >> dist/CHANGELOG.md
          git log -1 --pretty=format:"- %s (%h)" >> dist/CHANGELOG.md

      - name: Create and push tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag "v$VERSION"
          git push origin "v$VERSION"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: v${{ env.VERSION }}
          body_path: dist/CHANGELOG.md
          files: |
            dist/app-release.aab
            dist/app-release.apk
            dist/release.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
